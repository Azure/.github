# metadata
name: This repo is missing a license file.
description: This is a config to check if LICENSE.MD is present in repo.

# filters
resource: repository
where:
- |  
  repository.name.equals("tvm_build", StringComparison.InvariantCultureIgnoreCase)
  || repository.name.equals("api-management-self-hosted-gateway-ingress", StringComparison.InvariantCultureIgnoreCase)
  || repository.name.equals("aaz", StringComparison.InvariantCultureIgnoreCase)
  || repository.name.equals("azure-sphere-nre-yocto", StringComparison.InvariantCultureIgnoreCase)
  || repository.name.equals("azure-saas", StringComparison.InvariantCultureIgnoreCase)
  || repository.name.equals("azure-sphere-os-scenario-tests", StringComparison.InvariantCultureIgnoreCase)
  || repository.name.equals("C3", StringComparison.InvariantCultureIgnoreCase)
  || repository.name.equals("Azure-Functions", StringComparison.InvariantCultureIgnoreCase)
  || repository.name.equals("fta-wiki", StringComparison.InvariantCultureIgnoreCase)
  || repository.name.equals("expert-rotary-phone", StringComparison.InvariantCultureIgnoreCase)
  || repository.name.equals("bambrane-control-plane", StringComparison.InvariantCultureIgnoreCase)
  || repository.name.equals("azure-sphere-device-provisioning", StringComparison.InvariantCultureIgnoreCase)
  || repository.name.equals("Microsoft-Purview-Data-Quality", StringComparison.InvariantCultureIgnoreCase)
  || repository.name.equals("azure-sphere-daad", StringComparison.InvariantCultureIgnoreCase)
  || repository.name.equals("azure-sphere-developer-container", StringComparison.InvariantCultureIgnoreCase)
  || repository.name.equals("azure-sphere-device-authorization", StringComparison.InvariantCultureIgnoreCase)
  || repository.name.equals("azure-sphere-ext-u-boot", StringComparison.InvariantCultureIgnoreCase)
  || repository.name.equals("azure-sphere-imx8ulp-bootloader", StringComparison.InvariantCultureIgnoreCase)
  || repository.name.equals("azure-sphere-mariner-samples", StringComparison.InvariantCultureIgnoreCase)
  || repository.name.equals("azure-sphere-storage-config-generator", StringComparison.InvariantCultureIgnoreCase)
  || repository.name.equals("azure-sphere-are-launcher", StringComparison.InvariantCultureIgnoreCase)
  || repository.name.equals("azure-sphere-nre-utils", StringComparison.InvariantCultureIgnoreCase)
  || repository.name.equals("azure-sphere-are-fs", StringComparison.InvariantCultureIgnoreCase)
  || repository.name.equals("azure-sphere-gallery", StringComparison.InvariantCultureIgnoreCase)
  || repository.name.equals("azure-sphere-are-developer-tools", StringComparison.InvariantCultureIgnoreCase)
  || repository.name.equals("AML-git", StringComparison.InvariantCultureIgnoreCase)
  || repository.name.equals("samples", StringComparison.InvariantCultureIgnoreCase)
  || repository.name.equals("OpenAI", StringComparison.InvariantCultureIgnoreCase)
  || repository.name.equals("Pilot-in-Box", StringComparison.InvariantCultureIgnoreCase)
  || repository.name.equals("azure-sphere-samples", StringComparison.InvariantCultureIgnoreCase)
  || repository.name.equals("JorcorTest", StringComparison.InvariantCultureIgnoreCase)
  || repository.name.equals("acom", StringComparison.InvariantCultureIgnoreCase)
  || repository.name.equals("mlops-templates", StringComparison.InvariantCultureIgnoreCase)
  || repository.name.equals("azure-dev-pr-archive", StringComparison.InvariantCultureIgnoreCase)
  || repository.name.equals("E4K", StringComparison.InvariantCultureIgnoreCase)
  || repository.name.equals("SelfHelpContent-1", StringComparison.InvariantCultureIgnoreCase)
  || repository.name.equals("api-management-samples", StringComparison.InvariantCultureIgnoreCase)
  || repository.name.equals("azure-sphere-oss-migration-test-azure-sphere-nre-utils", StringComparison.InvariantCultureIgnoreCase)
  || repository.name.equals("azure-sdk-for-node", StringComparison.InvariantCultureIgnoreCase)
  || repository.name.equals("Purview-Tools", StringComparison.InvariantCultureIgnoreCase)
  || repository.name.equals("azure-dev-cli-extension", StringComparison.InvariantCultureIgnoreCase)
  || repository.name.equals("azure-sphere-oss-migration-test-imx8ulp-bootloader", StringComparison.InvariantCultureIgnoreCase)
  || repository.name.equals("azure-sphere-oss-migration-test-ext-u-boot", StringComparison.InvariantCultureIgnoreCase)
  || repository.name.equals("azure-sphere-oss-migration-test-azure-sphere-os-scenario-tests", StringComparison.InvariantCultureIgnoreCase)
  || repository.name.equals("azure-sphere-oss-migration-test-azure-sphere-device-provisioning", StringComparison.InvariantCultureIgnoreCase)
  || repository.name.equals("azure-sphere-oss-migration-test-azure-sphere-device-authorization", StringComparison.InvariantCultureIgnoreCase)
  || repository.name.equals("azure-sphere-oss-migration-test-azure-sphere-developer-container", StringComparison.InvariantCultureIgnoreCase)
  || repository.name.equals("azure-sphere-oss-migration-test-azure-sphere-daad", StringComparison.InvariantCultureIgnoreCase)
  || repository.name.equals("azure-sphere-oss-migration-test-azure-sphere-are-launcher", StringComparison.InvariantCultureIgnoreCase)
  || repository.name.equals("azure-sphere-oss-migration-test-azure-sphere-are-fs", StringComparison.InvariantCultureIgnoreCase)
  || repository.name.equals("azure-sphere-oss-migration-test-azure-sphere-are-developer-tools", StringComparison.InvariantCultureIgnoreCase)
  || repository.name.equals("azure-iot-mobility-services", StringComparison.InvariantCultureIgnoreCase)
  || repository.name.equals("fta-paragon", StringComparison.InvariantCultureIgnoreCase)
  || repository.name.equals("autorest.csharp", StringComparison.InvariantCultureIgnoreCase)
  || repository.name.equals("azure-sphere-oss-migration-test", StringComparison.InvariantCultureIgnoreCase)
  || repository.name.equals("azure-sdk-for-media-services", StringComparison.InvariantCultureIgnoreCase)
  || repository.name.equals("autorest.java", StringComparison.InvariantCultureIgnoreCase)
  || repository.name.equals("azure-sphere-oss-migration-test-azure-sphere-storage-config-generator", StringComparison.InvariantCultureIgnoreCase)
  || repository.name.equals("react-azure-maps-playground", StringComparison.InvariantCultureIgnoreCase)
  || repository.name.equals("azureml_run_specification", StringComparison.InvariantCultureIgnoreCase)
  || repository.name.equals("azure-marketplace", StringComparison.InvariantCultureIgnoreCase)

# primitive configuration
configuration:
    mandatoryFiles:
     issueTitle: This repo is missing a license file
     issueBody: |
            This repository is currently missing a LICENSE.MD file outlining its license. A license helps users understand how to use your project in a compliant manner. You can find the standard MIT license text at the Microsoft repo templates LICENSE file: https://github.com/microsoft/repo-templates/blob/main/shared/LICENSE.
            If you would like to learn more about open source licenses, please visit the document at https://aka.ms/license. 
     prTitle: Adding Microsoft LICENSE
     prBody: 
     file:
      - path: license((-|_)([a-z0-9])*)*(\.[-_a-z0-9]+)*
        ignoreCase: true
     issueReminder:
        firstReminderGapDays: -1      
        followUpReminderGapDays: 0
